#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definições para o tema de Streaming de Vídeos
#define MAX_VIDEOS 150         // Mais vídeos
#define MAX_TITULO 100         // Título do vídeo
#define MAX_GENERO 50          // Gênero do vídeo
#define MAX_USUARIOS 100
#define MAX_VIDEOS_FAVORITOS 20 // Um usuário pode ter até 20 vídeos favoritos

// Estrutura para representar um Vídeo (substitui Produto)
typedef struct {
    int idVideo;
    char titulo[MAX_TITULO];
    char genero[MAX_GENERO];
    float duracaoMinutos; // Duração em minutos
    int anoLancamento;
} Video;

// Estrutura para representar um Usuário (substitui Venda)
typedef struct {
    int idUsuario;
    char nomeUsuario[MAX_TITULO]; // Nome do usuário
    int videosFavoritos[MAX_VIDEOS_FAVORITOS]; // IDs dos vídeos favoritos
    int totalFavoritos; // Quantidade de vídeos favoritos
} Usuario;

// --- Funções para Manter Vídeos ---

void cadastrarVideo() {
    Video v;
    FILE *fp = fopen("videos.dat", "ab"); // Novo nome de arquivo
    if (!fp) {
        printf("Erro ao abrir arquivo de vídeos.\n");
        return;
    }
    printf("ID do Vídeo: "); scanf("%d", &v.idVideo); getchar(); // Consumir o \n
    printf("Título: "); fgets(v.titulo, MAX_TITULO, stdin);
    v.titulo[strcspn(v.titulo, "\n")] = 0; // Remover \n

    printf("Gênero: "); fgets(v.genero, MAX_GENERO, stdin);
    v.genero[strcspn(v.genero, "\n")] = 0; // Remover \n

    printf("Duração (minutos): "); scanf("%f", &v.duracaoMinutos);
    printf("Ano de Lançamento: "); scanf("%d", &v.anoLancamento);
    
    fwrite(&v, sizeof(Video), 1, fp);
    fclose(fp);
    printf("Vídeo cadastrado com sucesso!\n");
}

void listarVideos() {
    Video v;
    FILE *fp = fopen("videos.dat", "rb");
    if (!fp) { printf("Nenhum vídeo cadastrado.\n"); return; }
    printf("\n--- Catálogo de Vídeos ---\n");
    while (fread(&v, sizeof(Video), 1, fp))
        printf("ID: %d | Título: %s | Gênero: %s | Duração: %.1f min | Ano: %d\n", 
               v.idVideo, v.titulo, v.genero, v.duracaoMinutos, v.anoLancamento);
    fclose(fp);
}

void consultarVideoPorID() {
    int id;
    printf("ID do vídeo: "); scanf("%d", &id);
    Video v;
    FILE *fp = fopen("videos.dat", "rb");
    if (!fp) {
        printf("Erro ao abrir arquivo de vídeos.\n");
        return;
    }
    while (fread(&v, sizeof(Video), 1, fp)) {
        if (v.idVideo == id) {
            printf("ID: %d | Título: %s | Gênero: %s | Duração: %.1f min | Ano: %d\n", 
                   v.idVideo, v.titulo, v.genero, v.duracaoMinutos, v.anoLancamento);
            fclose(fp);
            return;
        }
    }
    printf("Vídeo não encontrado.\n");
    fclose(fp);
}

void atualizarVideo() {
    int id;
    printf("ID do vídeo a atualizar: ");
    scanf("%d", &id);
    Video v;
    int encontrado = 0;
    FILE *fp = fopen("videos.dat", "rb+");
    if (!fp) {
        printf("Erro ao abrir arquivo de vídeos.\n");
        return;
    }
    while (fread(&v, sizeof(Video), 1, fp)) {
        if (v.idVideo == id) {
            printf("Novo Título: "); getchar();
            fgets(v.titulo, MAX_TITULO, stdin);
            v.titulo[strcspn(v.titulo, "\n")] = 0;

            printf("Novo Gênero: ");
            fgets(v.genero, MAX_GENERO, stdin);
            v.genero[strcspn(v.genero, "\n")] = 0;

            printf("Nova Duração (minutos): "); scanf("%f", &v.duracaoMinutos);
            printf("Novo Ano de Lançamento: "); scanf("%d", &v.anoLancamento);
            
            fseek(fp, -sizeof(Video), SEEK_CUR); // Volta o ponteiro para o início do registro
            fwrite(&v, sizeof(Video), 1, fp);
            encontrado = 1;
            break;
        }
    }
    fclose(fp);
    if (encontrado) printf("Vídeo atualizado com sucesso!\n");
    else printf("Vídeo não encontrado.\n");
}

void removerVideo() {
    int id;
    printf("ID do vídeo a remover: "); scanf("%d", &id);
    FILE *fp = fopen("videos.dat", "rb");
    FILE *temp = fopen("temp_videos.dat", "wb"); // Arquivo temporário
    if (!fp || !temp) {
        printf("Erro ao abrir arquivos para remoção.\n");
        if(fp) fclose(fp);
        if(temp) fclose(temp);
        return;
    }
    Video v;
    int removido = 0;
    while (fread(&v, sizeof(Video), 1, fp)) {
        if (v.idVideo != id) {
            fwrite(&v, sizeof(Video), 1, temp);
        } else {
            removido = 1;
        }
    }
    fclose(fp); 
    fclose(temp);
    
    remove("videos.dat"); // Apaga o arquivo original
    rename("temp_videos.dat", "videos.dat"); // Renomeia o temp para o original
    
    if (removido) printf("Vídeo removido.\n");
    else printf("Vídeo não encontrado.\n");
}

// --- Funções para Manter Usuários e Seus Favoritos ---

void cadastrarUsuario() {
    Usuario u;
    FILE *fp = fopen("usuarios.dat", "ab"); // Novo nome de arquivo
    if (!fp) {
        printf("Erro ao abrir arquivo de usuários.\n");
        return;
    }
    printf("ID do Usuário: "); scanf("%d", &u.idUsuario); getchar();
    printf("Nome do Usuário: "); fgets(u.nomeUsuario, MAX_TITULO, stdin);
    u.nomeUsuario[strcspn(u.nomeUsuario, "\n")] = 0;
    
    u.totalFavoritos = 0; // Inicializa sem favoritos
    
    fwrite(&u, sizeof(Usuario), 1, fp);
    fclose(fp);
    printf("Usuário cadastrado com sucesso!\n");
}

void listarUsuarios() {
    Usuario u;
    FILE *fpU = fopen("usuarios.dat", "rb"); // Arquivo de usuários
    FILE *fpV = fopen("videos.dat", "rb");   // Arquivo de vídeos (para detalhes dos favoritos)
    
    if (!fpU) { printf("Nenhum usuário cadastrado.\n"); return; }
    if (!fpV) { printf("Aviso: Arquivo de vídeos não encontrado. Favoritos não serão exibidos.\n"); }

    printf("\n--- Lista de Usuários ---\n");
    while (fread(&u, sizeof(Usuario), 1, fpU)) {
        printf("ID: %d | Nome: %s\n", u.idUsuario, u.nomeUsuario);
        if (u.totalFavoritos > 0 && fpV) {
            printf("  Vídeos Favoritos (%d):\n", u.totalFavoritos);
            for (int i = 0; i < u.totalFavoritos; i++) {
                rewind(fpV); // Volta ao início do arquivo de vídeos para cada busca
                Video v;
                int videoAchado = 0;
                while (fread(&v, sizeof(Video), 1, fpV)) {
                    if (v.idVideo == u.videosFavoritos[i]) {
                        printf("    - [ID %d] %s (%s, %.1f min)\n", v.idVideo, v.titulo, v.genero, v.duracaoMinutos);
                        videoAchado = 1;
                        break;
                    }
                }
                if (!videoAchado) {
                    printf("    - Vídeo com ID %d (favorito) não encontrado no catálogo.\n", u.videosFavoritos[i]);
                }
            }
        } else if (u.totalFavoritos == 0) {
            printf("  Nenhum vídeo favorito registrado.\n");
        }
    }
    fclose(fpU);
    if(fpV) fclose(fpV); // Fechar se foi aberto
}

void consultarUsuarioPorID() {
    int id;
    printf("ID do usuário: "); scanf("%d", &id);
    Usuario u;
    FILE *fpU = fopen("usuarios.dat", "rb");
    FILE *fpV = fopen("videos.dat", "rb");
    if (!fpU) { printf("Erro ao abrir arquivo de usuários.\n"); return; }
    if (!fpV) { printf("Aviso: Arquivo de vídeos não encontrado. Favoritos não serão exibidos.\n"); }
    
    int encontrou = 0;
    while (fread(&u, sizeof(Usuario), 1, fpU)) {
        if (u.idUsuario == id) {
            printf("--- Detalhes do Usuário ---\n");
            printf("ID: %d | Nome: %s\n", u.idUsuario, u.nomeUsuario);
            if (u.totalFavoritos > 0 && fpV) {
                printf("  Vídeos Favoritos (%d):\n", u.totalFavoritos);
                for (int i = 0; i < u.totalFavoritos; i++) {
                    rewind(fpV);
                    Video v;
                    int videoAchado = 0;
                    while (fread(&v, sizeof(Video), 1, fpV)) {
                        if (v.idVideo == u.videosFavoritos[i]) {
                            printf("    - [ID %d] %s (%s, %.1f min)\n", v.idVideo, v.titulo, v.genero, v.duracaoMinutos);
                            videoAchado = 1;
                            break;
                        }
                    }
                    if (!videoAchado) {
                        printf("    - Vídeo com ID %d (favorito) não encontrado no catálogo.\n", u.videosFavoritos[i]);
                    }
                }
            } else if (u.totalFavoritos == 0) {
                printf("  Nenhum vídeo favorito registrado.\n");
            }
            encontrou = 1;
            break;
        }
    }
    if (!encontrou) printf("Usuário não encontrado.\n");
    fclose(fpU);
    if(fpV) fclose(fpV);
}

void adicionarRemoverVideoFavorito() { // Nova função para gerenciar favoritos
    int idUsuario, idVideoFav;
    printf("ID do usuário: "); scanf("%d", &idUsuario);
    printf("ID do vídeo para adicionar/remover dos favoritos: "); scanf("%d", &idVideoFav);

    FILE *fpU = fopen("usuarios.dat", "rb+");
    FILE *fpV = fopen("videos.dat", "rb"); // Para verificar se o vídeo existe
    if (!fpU) { printf("Erro ao abrir arquivo de usuários.\n"); return; }
    if (!fpV) { printf("Erro ao abrir arquivo de vídeos.\n"); fclose(fpU); return; }

    Usuario u;
    Video v;
    int usuarioEncontrado = 0;
    int videoExiste = 0;

    // Verificar se o vídeo existe no catálogo
    while (fread(&v, sizeof(Video), 1, fpV)) {
        if (v.idVideo == idVideoFav) {
            videoExiste = 1;
            break;
        }
    }
    fclose(fpV); // Fechar arquivo de vídeos, pois não precisaremos mais dele nesta parte

    if (!videoExiste) {
        printf("Erro: Vídeo com ID %d não existe no catálogo.\n", idVideoFav);
        fclose(fpU);
        return;
    }

    rewind(fpU); // Volta para o início do arquivo de usuários
    while (fread(&u, sizeof(Usuario), 1, fpU)) {
        if (u.idUsuario == idUsuario) {
            usuarioEncontrado = 1;
            int jaFavorito = 0;
            int indiceParaRemover = -1;

            // Verificar se já é favorito
            for (int i = 0; i < u.totalFavoritos; i++) {
                if (u.videosFavoritos[i] == idVideoFav) {
                    jaFavorito = 1;
                    indiceParaRemover = i;
                    break;
                }
            }

            if (jaFavorito) {
                // Remover dos favoritos
                for (int i = indiceParaRemover; i < u.totalFavoritos - 1; i++) {
                    u.videosFavoritos[i] = u.videosFavoritos[i+1];
                }
                u.totalFavoritos--;
                printf("Vídeo removido dos favoritos do usuário %s.\n", u.nomeUsuario);
            } else {
                // Adicionar aos favoritos
                if (u.totalFavoritos < MAX_VIDEOS_FAVORITOS) {
                    u.videosFavoritos[u.totalFavoritos] = idVideoFav;
                    u.totalFavoritos++;
                    printf("Vídeo adicionado aos favoritos do usuário %s.\n", u.nomeUsuario);
                } else {
                    printf("Limite de vídeos favoritos atingido para o usuário %s.\n", u.nomeUsuario);
                }
            }
            fseek(fpU, -sizeof(Usuario), SEEK_CUR);
            fwrite(&u, sizeof(Usuario), 1, fpU);
            break;
        }
    }
    fclose(fpU);
    if (!usuarioEncontrado) {
        printf("Usuário com ID %d não encontrado.\n", idUsuario);
    }
}


void atualizarUsuario() {
    int id;
    printf("ID do usuário a atualizar: ");
    scanf("%d", &id);
    Usuario u;
    int encontrado = 0;
    FILE *fp = fopen("usuarios.dat", "rb+");
    if (!fp) {
        printf("Erro ao abrir arquivo de usuários.\n");
        return;
    }
    while (fread(&u, sizeof(Usuario), 1, fp)) {
        if (u.idUsuario == id) {
            printf("Novo Nome do Usuário: "); getchar();
            fgets(u.nomeUsuario, MAX_TITULO, stdin);
            u.nomeUsuario[strcspn(u.nomeUsuario, "\n")] = 0;
            
            // Aqui você pode permitir atualizar os favoritos também, mas seria mais complexo.
            // Por simplicidade, vou manter apenas o nome ou sugerir a função dedicada.
            printf("Total de favoritos atual: %d. Use a opção dedicada para gerenciar favoritos.\n", u.totalFavoritos);

            fseek(fp, -sizeof(Usuario), SEEK_CUR);
            fwrite(&u, sizeof(Usuario), 1, fp);
            encontrado = 1;
            break;
        }
    }
    fclose(fp);
    if (encontrado) printf("Usuário atualizado com sucesso!\n");
    else printf("Usuário não encontrado.\n");
}

void removerUsuario() {
    int id;
    printf("ID do usuário a remover: "); scanf("%d", &id);
    FILE *fp = fopen("usuarios.dat", "rb");
    FILE *temp = fopen("temp_usuarios.dat", "wb"); // Arquivo temporário
    if (!fp || !temp) {
        printf("Erro ao abrir arquivos para remoção.\n");
        if(fp) fclose(fp);
        if(temp) fclose(temp);
        return;
    }
    Usuario u;
    int removido = 0;
    while (fread(&u, sizeof(Usuario), 1, fp)) {
        if (u.idUsuario != id) {
            fwrite(&u, sizeof(Usuario), 1, temp);
        } else {
            removido = 1;
        }
    }
    fclose(fp); 
    fclose(temp);
    
    remove("usuarios.dat"); // Apaga o original
    rename("temp_usuarios.dat", "usuarios.dat"); // Renomeia o temp
    
    if (removido) printf("Usuário removido.\n");
    else printf("Usuário não encontrado.\n");
}


int main() {
    int opcao;
    do {
        printf("\n--- SISTEMA DE GERENCIAMENTO DE STREAMING ---\n");
        printf("1  - Cadastrar Novo Vídeo\n");
        printf("2  - Listar Vídeos Disponíveis\n");
        printf("3  - Cadastrar Novo Usuário\n");
        printf("4  - Listar Usuários e Favoritos\n");
        printf("5  - Remover Vídeo do Catálogo\n");
        printf("6  - Atualizar Detalhes de Vídeo\n");
        printf("7  - Atualizar Informações de Usuário\n");
        printf("8  - Consultar Vídeo por ID\n");
        printf("9  - Consultar Usuário por ID\n");
        printf("10 - Adicionar/Remover Vídeo Favorito de Usuário\n"); // Nova opção
        printf("11 - Remover Usuário\n"); // Nova opção
        printf("0  - Sair do Sistema\n");
        printf("----------------------------------------------\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        getchar(); // Consumir o \n pendente após scanf

        switch (opcao) {
            case 1: cadastrarVideo(); break;
            case 2: listarVideos(); break;
            case 3: cadastrarUsuario(); break;
            case 4: listarUsuarios(); break;
            case 5: removerVideo(); break;
            case 6: atualizarVideo(); break;
            case 7: atualizarUsuario(); break;
            case 8: consultarVideoPorID(); break;
            case 9: consultarUsuarioPorID(); break;
            case 10: adicionarRemoverVideoFavorito(); break; // Chama a nova função
            case 11: removerUsuario(); break; // Chama a nova função
            case 0: printf("Encerrando o Sistema de Streaming. Até a próxima!\n"); break;
            default: printf("Opção inválida! Por favor, selecione uma opção válida.\n");
        }
        printf("\nPressione ENTER para continuar...");
        getchar(); // Pausa para o usuário ver a saída
    } while (opcao != 0);

    return 0;
}
